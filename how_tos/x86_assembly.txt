=== 32 bit ===

cdecl:

* subroutine arguments are passed on the stack.
* Integer results are put in eax.
* Floating point results are on the top of the x87 stack, ie st(0).
* EAX, ECX, and EDX are caller-saved.
* The rest are callee-saved.
* The x87 floating point registers ST0 to ST7 must be empty (popped or freed)
  when calling a new function, and ST1 to ST7 must be empty on exiting a
  function. ST0 must also be empty when not used for returning a value.

In the context of the C programming language, function arguments are pushed on
the stack in the right-to-left order, i.e. the last argument is pushed first.


=== 64 bit ===


https://en.wikipedia.org/wiki/X86_calling_conventions#x86-64_calling_conventions

## Linux Calling Convention

The first six integer or pointer arguments are passed in registers RDI, RSI,
RDX, RCX, R8, R9 (R10 is used as a static chain pointer in case of nested
functions[24]:21), while XMM0, XMM1, XMM2, XMM3, XMM4, XMM5, XMM6 and XMM7 are
used for the first floating point arguments.[24]:22 As in the Microsoft x64
calling convention, additional arguments are passed on the stack.[24]:22
Integer return values up to 64 bits in size are stored in RAX while values up
to 128 bit are stored in RAX and RDX. Floating-point return values are
similarly stored in XMM0 and XMM1.[24]:25 The wider YMM and ZMM registers are
used for passing and returning wider values in place of XMM when they
exist.


## Microsoft calling convention

The first four integer/pointer arguments are passed in RCX, RDX, R8, R9 for
integer, and XMM0, XMM1, XMM2, XMM3 for floating point arguments. Integer
return values are returned in RAX if 64 bits or less. Floating point return
values are returned in XMM0.


