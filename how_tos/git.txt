== Show repo URL ==

git config --get remote.origin.url
git branch


== Clone a specific branch ==

git clone -b <branch name> <repo URI>


== Revert a local change ==

git checkout <filename>

or for a whole subtree:
  git checkout . 


== Revising local commits before pushing ==

git rebase -i

https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History


== Edit an commit message that has not been pushed ==

git commit --amend


== Make fetch and pull remove branches that were removed on the remote ==

git config --global fetch.prune true


== Setting your branch to exactly match the remote branch can be done in two steps ==

git fetch origin
git reset --hard origin/master


== Show history of renamed file ==

git log --follow <filename>


== Get back to a clean state ==

#!/bin/bash
#Cleans and resets a git repo and its submodules
#https://gist.github.com/nicktoumpelis/11214362
git reset --hard
git submodule sync --recursive
git submodule update --init --force --recursive
git clean -ffdx
git submodule foreach --recursive git clean -ffdx


== Sparse Checkout ==

Nothing can prevent git from having to download the entire thing, despite what the internet says.


== Remember password in memory for 15 minutes ==

git config --global credential.helper cache


== Copy a folder from one repo to another and preserve history ==

Use the top voted answer here (not the accepted answer):
https://stackoverflow.com/questions/1365541/how-to-move-files-from-one-git-repo-to-another-not-a-clone-preserving-history

The idea is to form a patch file of all the commits that pertain to your chosen
folder, then apply that patch in the new repo. The nice thing is that you can
adjust the folder names by running a sed command on the patch file before you
apply it. In my case I used sed to replace /msrc/rkvs/ with /libs/rkvs/. The
command was:

sed -i "s_/msrc/rkvs/_/libs/rkvs/_g" patch


== Get a submodule ==

git submodule init port/mediatek/r81x
git submodule update --progress port/mediatek/r81x


== Get all submodules ==

git clone --recurse-submodules


== Beyond compare ==

git config --global diff.tool bc
echo "git difftool -d --no-symlinks $1^ $1" > ~/scripts/git_diff_commit.sh
alias gdc=~/scripts/git_diff_commit.sh


== ssh agent ==

# start the ssh-agent in the background
$ eval "$(ssh-agent -s)"
> Agent pid 59566

Add your SSH private key to the ssh-agent. If you created your key with a
different name, or if you are adding an existing key that has a different name,
replace id_rsa in the command with the name of your private key file.

$ ssh-add ~/.ssh/id_rsa